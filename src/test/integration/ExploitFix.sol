pragma solidity 0.8.13;

// Interfaces
import {ICEther} from "../interfaces/ICEther.sol";
import {ICEtherDelegate} from "../interfaces/ICEtherDelegate.sol";
import {ICEtherDelegator} from "../interfaces/ICEtherDelegator.sol";
import {IComptroller} from "../interfaces/IComptroller.sol";
import {IFuseAdmin} from "../interfaces/IFuseAdmin.sol";
import {IFuseFeeDistributor} from "../interfaces/IFuseFeeDistributor.sol";
import {IProxy} from "../interfaces/IProxy.sol";

// Test utilities
import {Test} from "../utilities/Test.sol";
import {console2} from "../utilities/console2.sol";

contract ExploitFix is Test {
    // Tetranode's Flavor of the Month Ethereum Network Token
    ICEtherDelegator CEtherDelegator =
        ICEtherDelegator(0xbB025D470162CC5eA24daF7d4566064EE7f5F111);

    ICEtherDelegate CEtherDelegate =
        ICEtherDelegate(address(CEtherDelegator.implementation()));

    // Multisig
    address multisig = 0x5eA4A9a7592683bF0Bc187d6Da706c6c4770976F;

    function setUp() public {
        vm.label(address(CEtherDelegator), "CEtherDelegator");
        vm.label(address(CEtherDelegate), "CEtherDelegate");
        vm.label(multisig, "multisig");

        // Fuse pool 8
        IComptroller comptroller = IComptroller(
            0xc54172e34046c1653d1920d40333Dd358c7a1aF4
        );

        address comptrollerAdmin = comptroller.admin();
        vm.label(address(comptrollerAdmin), "comptrollerAdmin");

        // Impersonate Comptroller admin
        vm.startPrank(comptrollerAdmin);

        IFuseFeeDistributor fuseFeeDistributor = IFuseFeeDistributor(
            address(0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85)
        );
        vm.label(address(fuseFeeDistributor), "fuseFeeDistributor");

        address fuseFeeDistributorOwner = fuseFeeDistributor.owner();
        vm.label(address(fuseFeeDistributorOwner), "fuseFeeDistributorOwner");

        // Impersonate FuseFeeDistributor owner
        vm.stopPrank();
        vm.startPrank(fuseFeeDistributorOwner);

        // fuseFeeDistributor._editCEtherDelegateWhitelist(
        //     [address(CEtherDelegate),],
        //     newImplementations,
        //     allowResign,
        //     statuses
        // );
    }

    function testExample() public {
        assertTrue(true);
    }
}
