pragma solidity 0.5.17;

import "./CEtherDelegate.sol";

/**
 * @title Compound's CEtherDelegate Contract
 * @notice CTokens which wrap Ether and are delegated to
 * @author Compound
 */
contract CEtherDelegateTempExploitAccounting is CEtherDelegate {
    /**
     * @notice Called by the delegator on a delegate to initialize it for duty
     * @param data The encoded bytes data for any initialization
     */
    function _becomeImplementation(bytes calldata data) external {
        require(msg.sender == address(this) || hasAdminRights(), "!self");
        require(accrueInterest() == uint256(Error.NO_ERROR), "!accrue");

        // Get secondary accounts from data
        address[] memory secondaryAccounts = abi.decode(data, (address[]));
        uint256 secondaryAccountsBorrowBalance = 0;

        for (uint256 i = 0; i < secondaryAccounts.length; i++) {
            address secondaryAccount = secondaryAccounts[i];

            // Get account #2 borrow balance
            uint256 secondaryAccountBorrowBalance = div_(
                mul_(accountBorrows[secondaryAccount].principal, borrowIndex),
                accountBorrows[secondaryAccount].interestIndex
            );
            secondaryAccountsBorrowBalance = add_(
                secondaryAccountsBorrowBalance,
                secondaryAccountBorrowBalance
            );

            // Set account #2 borrow balance to 0
            accountBorrows[secondaryAccount].principal = 0;
            accountBorrows[secondaryAccount].interestIndex = borrowIndex;
        }

        // Get account #1 supply balance
        uint256 account1SupplyShares = accountTokens[
            0x32075bAd9050d4767018084F0Cb87b3182D36C45
        ];
        uint256 account1SupplyBalance = mul_ScalarTruncate(
            Exp({mantissa: exchangeRateStored()}),
            account1SupplyShares
        );

        // Set account #1 supply shares to 0
        accountTokens[0x32075bAd9050d4767018084F0Cb87b3182D36C45] = 0;

        // Set account #1 borrow balance = secondary accounts' borrow balance - account #1 supply balance
        require(
            secondaryAccountsBorrowBalance >= account1SupplyBalance,
            "Expect secondary accounts' combined borrow balance >= account #1 supply balance."
        );
        require(
            accountBorrows[0x32075bAd9050d4767018084F0Cb87b3182D36C45]
                .principal == 0,
            "Expect account #1 borrow balance to start at 0."
        );
        accountBorrows[0x32075bAd9050d4767018084F0Cb87b3182D36C45]
            .principal = sub_(
            secondaryAccountsBorrowBalance,
            account1SupplyBalance
        );
        accountBorrows[0x32075bAd9050d4767018084F0Cb87b3182D36C45]
            .interestIndex = borrowIndex;

        // Subtract from total supply
        totalSupply = sub_(totalSupply, account1SupplyShares);

        // Subtract from total borrows
        totalBorrows = sub_(totalBorrows, account1SupplyBalance);
    }

    /**
     * @notice Function called before all delegator functions
     */
    function _prepare() external payable {}
}
